#!/bin/bash
#
# Test, build, and publish parasoft-demo-app to Nexus repository.
# IMPORTANT: Must execute this script in it's own directory.
# OS environment variables:
#   JTEST_HOME - required.
# Jenkins build parameters:
#   JTEST_SA - required for Jtest static analysis.
#   JTEST_UT - required for Jtest unit test.
#   DTP_USER - required, user name for DTP server 192.168.3.130:8443, required for Jtest.
#   DTP_PASSWORD - required, password for DTP server 192.168.3.130:8443, required for Jtest.
#   REPORT_MAIL_PASSWORD - required, password for nightly-cn@parasoft.com, required for reporting Jtest test results by e-mail.
#   PUBLISH_TO_NEXUS - required for publish to nexus repository.
#   NEXUS_URL - required, defaults to http://nexus.parasoft.com.cn:8081/nexus, and pda-snapshots repository
#               (Maven2, Repository Policy: Release, Deployment Policy: Allow Redeploy) should be created first.
#   NEXUS_USERNAME - required for publish to nexus repository.
#   NEXUS_PASSWORD - required for publish to nexus repository.
#   PUBLISH_REPORT_TO_DTP - true or false.
#   SEND_REPORT_EMAIL - true or false.
#   DO_NOT_CLEAN_GRADLE - do not clean files generated by Gradle task.
#   DO_NOT_BUILD - show Gradle tasks only.
# Jenkins environment variables:
#   BUILD_NUMBER
#   GIT_COMMIT
# Internally used variables:
#   DEBUG_JTEST - `export DEBUG_JTEST="true"` to show Jtest settings
#

set -e         
#set -u
set -o pipefail

readonly CURRENT_SCRIPT_DIR="$(pwd)"

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$(uname)" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

if [[ "${JTEST_SA}" == "true" || "${JTEST_UT}" == "true" ]]; then
  if [[ -z "${JTEST_HOME}" ]]; then
    die "ERROR: JTEST_HOME environment variable is not available."
    exit 1
  fi
fi

JTEST_GRADLE_INIT_SCRIPT="${JTEST_HOME}/integration/gradle/init.gradle"
LOCAL_GIT_REPOSITORY_DIR="$(dirname "${CURRENT_SCRIPT_DIR}")"
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
  JTEST_GRADLE_INIT_SCRIPT="$(cygpath --mixed "$JTEST_GRADLE_INIT_SCRIPT")"
  LOCAL_GIT_REPOSITORY_DIR="$(cygpath -w "${LOCAL_GIT_REPOSITORY_DIR}")"
fi
readonly JTEST_GRADLE_INIT_SCRIPT
readonly LOCAL_GIT_REPOSITORY_DIR
export SCONTROL_REP1_GIT_WORKSPACE="${LOCAL_GIT_REPOSITORY_DIR}"

if [[ "${PUBLISH_REPORT_TO_DTP}" == "true" ]]; then
  export REPORT_DTP_PUBLISH="true"
else
  export REPORT_DTP_PUBLISH="false"
fi

if [[ "${SEND_REPORT_EMAIL}" == "true" ]]; then
  export REPORT_MAIL_ENABLED="true"
else
  export REPORT_MAIL_ENABLED="false"
fi

declare -a jtest_sa_flags
jtest_sa_flags=(--stacktrace)
declare -a jtest_ut_flags
jtest_ut_flags=(--stacktrace)
declare -a build_flags
build_flags=(--stacktrace)

if [[ "${DO_NOT_CLEAN_GRADLE}" != "true" ]]; then
  jtest_sa_flags+=(clean)
  jtest_ut_flags+=(clean)
  build_flags+=(clean)
fi

if [[ "${DEBUG_JTEST}" == "true" ]]; then
    jtest_sa_flags+=(-Djtest.showsettings="true")
    jtest_ut_flags+=(-Djtest.showsettings="true")
fi

if [[ "${JTEST_SA}" == "true" ]]; then
  echo "Start Jtest static analysis..."
  jtest_sa_flags+=(jtest -I "${JTEST_GRADLE_INIT_SCRIPT}" -Djtest.settings="jtestcli-sa-ut.properties" \
  -Djtest.config="dtp://DTP Recommended Rules" -Djtest.report="./build/reports/jtest/static")
  echo "Jtest static analysis flags: ${jtest_sa_flags[@]}"
  bash ./gradlew "${jtest_sa_flags[@]}"
fi

if [[ "${JTEST_UT}" == "true" ]]; then
  echo "Start Jtest unit test..."
  jtest_ut_flags+=(jtest-agent test jtest -I "${JTEST_GRADLE_INIT_SCRIPT}" \
  -Djtest.settings="jtestcli-sa-ut.properties" -Djtest.config="builtin://Unit Tests" \
  -Djtest.report="./build/reports/jtest/junit" --continue)
  echo "Jtest unit test flags: ${jtest_ut_flags[@]}"
  bash ./gradlew "${jtest_ut_flags[@]}"
fi

if [[ "${DO_NOT_BUILD}" == "true" ]]; then
  build_flags+=(tasks)
else 
  if [[ "${PUBLISH_TO_NEXUS}" == "true" ]]; then
    build_flags+=(publishDemoAppPublicationToSnapshotsRepository)

    if [[ -n "${NEXUS_URL}" ]]; then
      build_flags+=(-PpdaSnapshotsRepoUrl="${NEXUS_URL}/content/repositories/pda-snapshots/")
    fi

    if [[ -n "${NEXUS_USERNAME}" ]]; then
      build_flags+=(-PrepoUsername="${NEXUS_USERNAME}")
    else
      die "ERROR: Need to specify the user name for publishing to Nexus repository."
      exit 1
    fi

    if [[ -n "${NEXUS_PASSWORD}" ]]; then
      build_flags+=(-PrepoPassword="${NEXUS_PASSWORD}")
    fi
  else
    build_flags+=(bootWar)
  fi
fi

if [[ -n "${BUILD_NUMBER}" ]]; then
  build_flags+=(-PjenkinsBuildNumber="${BUILD_NUMBER}")
fi

if [[ -n "${GIT_COMMIT}" ]]; then
  build_flags+=(-PgitCommitHash="${GIT_COMMIT:0:11}")
fi

echo "Build flags: ${build_flags[@]}"
bash ./gradlew "${build_flags[@]}"
